@using Pink_Panthers_Project.Util

@model Pink_Panthers_Project.Models.ViewModel

@{
    ViewData["Title"] = "Course";
}


<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script type="text/javascript">
		document.addEventListener('DOMContentLoaded', function () {

			var xArray = ['A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'];

			var data = [{
				type: 'bar',
				x: xArray,
				y: [@Model.countA, @Model.countAMinus, @Model.countBPlus, @Model.countB, @Model.countBMinus, @Model.countCPlus,
					@Model.countC, @Model.countCMinus, @Model.countDPlus, @Model.countD, @Model.countDMinus, @Model.countE],
				marker: {
					color: ['rgba(0,255,0,1)','rgba(0,255,0,1)','rgba(0,200,55,1)','rgba(0,100,155,1)','rgba(0,0,255,1)',
							'rgba(50,0,205,1)','rgba(100,0,155,1)','rgba(150,0,150,1)','rgba(255,0,0,1)','rgba(255,0,0,1)',
							'rgba(255,0,0,1)','rgba(255,0,0,1)']
				},
				boxpoints: 'false',
				line: {
					color: '#a64d79'
				},
				hoverinfo: 'x'
			}];

			var layout = {
				title: 'Class Performance',
				yaxis: {
					zeroline: false,
					range: [0, 20]
				}
			};

			Plotly.newPlot('classPerformance', data, layout);
		});
    </script>
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {

            var xArray = ['A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'];

            var data = [{
                type: 'bar',
                x: xArray,
                y: [@Model.countA, @Model.countAMinus, @Model.countBPlus, @Model.countB, @Model.countBMinus, @Model.countCPlus,
        @Model.countC, @Model.countCMinus, @Model.countDPlus, @Model.countD, @Model.countDMinus, @Model.countE],
                marker: {
                    color: ['rgba(0,255,0,1)', 'rgba(0,255,0,1)', 'rgba(0,200,55,1)', 'rgba(0,100,155,1)', 'rgba(0,0,255,1)',
                        'rgba(50,0,205,1)', 'rgba(100,0,155,1)', 'rgba(150,0,150,1)', 'rgba(255,0,0,1)', 'rgba(255,0,0,1)',
                        'rgba(255,0,0,1)', 'rgba(255,0,0,1)'],
                    style: ['','','','','','','stroke-color: rgba(0,0,0,0.5)','','','','','']
                },
                boxpoints: 'false',
                line: {
                    color: '#a64d79'
                },
                hoverinfo: 'x'
            }];
            var layout = {
                title: 'Class Performance',
                yaxis: {
                    zeroline: false,
                    range: [0, 20]
                }
            };

            Plotly.newPlot('classPerformanceStudent', data, layout);
        });
    </script>
</head>
<body>
    <div class="container">
        <div class="row mt-5">
            <div style="display: flex; justify-content: flex-end;">
                @{

                    int totalGrades = 0;
                    int totalPossiblePoints = 0;
                    bool teacher = Model.Account.isTeacher;

                    if (Model != null && !Model.Account.isTeacher)
                    {
                        foreach (var assignment in Model.AllAssignments.Where(a => a.ClassID == Model.Class.ID))
                        {
                            bool hasSubmission = false;
                            bool isPastDue = false;

                            if (assignment.DueDate < DateTime.Now)
                            {
                                isPastDue = true;
                            }

                            foreach (var submission in Model.StudentSubmissions.Where(s => s.AssignmentID == assignment.Id))
                            {
                                if (submission.Grade.HasValue && assignment.submitted == true)
                                {
                                    // Assignment has a grade
                                    totalGrades += submission.Grade.Value;
                                    totalPossiblePoints += assignment.PossiblePoints;
                                }
                                else if (!isPastDue)
                                {
                                    // Assignment doesn't have a grade, and due date is not in the past
                                    // Skip this assignment in the calculation
                                    continue;
                                }

                                hasSubmission = true;
                            }

                            if (isPastDue && !hasSubmission)
                            {
                                totalGrades += 0;
                                totalPossiblePoints += assignment.PossiblePoints;
                            }
                        }
                    }

                    if (teacher) ;
                    else if (totalPossiblePoints > 0)
                    {
                        <h5>@totalGrades / @totalPossiblePoints</h5>
                    }
                    else
                    {
                        <h5>N/A</h5>
                    }
                    
                }
            </div>
            <div style="display: flex; justify-content: space-between;">
                <h1>@Model!.Class!.CourseName</h1>
                <div style="display: flex; align-items: center;">
                    @{
                        if (teacher) ;
                        else if (totalPossiblePoints > 0)
                        {
                            var numericGrade = ((double)totalGrades / totalPossiblePoints) * 100;
                            var Grade = numericGrade.ToString("0.00");
                            var letterGrade = GradingUtil.GetLetterGrade(numericGrade);
                            <h2 style="margin-left: 15px;">@Grade% - @letterGrade</h2>
                        }
                        else
                        {
                            <h2 style="margin-left: 15px;">N/A</h2>
                        }
                    }
                </div>
            </div>
            

            <h2>Assignments:</h2>
            @if (Model!.Assignments!.Count == 0)
            {
                <p>No Assignments yet for this course</p>
                if (Model.Account!.isTeacher)
                {
                    <div class="col-md-4">
                        <a asp-action="CreateAssignment" asp-route-id="@Model?.Class?.ID" class="btn btn-primary" id="CreateAssignment">Create Assignment</a>
                    </div>
                }
            }
            else
            {
                @if (Model.Account!.isTeacher)
                {
                    <table>
                        <tr>
                            <th>Name</th>
                            <th>Points</th>
                            <th>Due Date</th>
                            <th>Submission Type</th>
                            <th>Submissions</th>
                            <th>Edit</th>
                            <th>Delete</th>
                        </tr>
                        @foreach (var assignment in Model?.Assignments!)
                        {
                            <tr>
                                <td>@assignment.AssignmentName</td>
                                <td>@assignment.PossiblePoints</td>
                                <td>@assignment.DueDate.ToString()</td>
                                <td>@assignment.SubmissionType</td>
                                <td><a class="btn btn-primary" asp-action="ViewSubmissions" asp-route-assignmentID="@assignment.Id">Submissions</a></td>
                                <td><a class="btn btn-light" asp-action="EditAssignment" asp-route-AssignmentID="@assignment.Id">Edit</a></td>
                                <td><a class="btn btn-warning" asp-action="DeleteAssignment" asp-route-AssignmentID="@assignment.Id" id="@Html.Raw(assignment.AssignmentName + "deleteBtn")">Delete</a></td>
                            </tr>
                        }
                    </table>
                    <div class="col-md-4">
                        <a asp-action="CreateAssignment" asp-route-id="@Model?.Class?.ID" class="btn btn-primary" id="CreateAssignment">Create Assignment</a>
                    </div>

                    <div class="row mt-3">
                        <div id="classPerformance" />
                    </div>
                }

                @if (!Model!.Account.isTeacher)
                {
                    <table>
                        <tr>
                            <th>Name</th>
                            <th>Points</th>
                            <th>Due Date</th>
                            <th>Submission Type</th>
                            <th>Grade</th>
                            <th>Submissions</th>
                            <th>Performance</th>
                        </tr>
                        @foreach (var assignment in Model?.Assignments!)
                        {
                            <tr>
                                <td>@assignment.AssignmentName</td>
                                <td>@assignment.PossiblePoints</td>
                                <td>@assignment.DueDate.ToString()</td>
                                <td>@assignment.SubmissionType</td>
                                <td>@Model.StudentSubmissions!.Where(c => c.AssignmentID == assignment.Id).Select(c => c.Grade).SingleOrDefault() / @assignment.PossiblePoints</td>
                                @if (Model.StudentSubmissions!.Exists(c => c.AssignmentID == assignment.Id))
                                {
                                    <td><a class="btn btn-primary" asp-action="SubmitAssignment" asp-route-assignmentID="@assignment.Id" id="@Html.Raw(assignment.Id + "submitAssignmentBtn")">Re-Submit Assignment</a></td>
                                }
                                else
                                {
                                    <td><a class="btn btn-primary" asp-action="SubmitAssignment" asp-route-assignmentID="@assignment.Id" id="@Html.Raw(assignment.Id + "submitAssignmentBtn")">Submit Assignment</a></td>

                                }
                                @if (Model.StudentSubmissions!.Exists(c => c.AssignmentID == assignment.Id))
                                {
                                    <td><a class="btn btn-primary" asp-action="ViewSubmissions" asp-route-assignmentID="@assignment.Id">Performance</a></td>
                                }
                            </tr>
                        }
                    </table>
                    <div class="row mt-3">
                       <div id="classPerformanceStudent" />
                    </div>
                }
            }

        </div>
    </div>
</body>
</html>
